# 674. Longest Continuous Increasing Subsequence
# Difficulty level - Easy

# Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

# Example 1:

# Input: nums = [1,3,5,4,7]
# Output: 3
# Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
# Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4.
# Example 2:

# Input: nums = [2,2,2,2,2]
# Output: 1
# Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
# increasing.

def findLengthOfLCIS(nums):
        
    max = 1
    current = 1

    for i in range(len(nums)-1):
        if nums[i] >= nums[i+1]:
            current = 1
            continue

        current += 1

        if current > max:
            max += 1

    return max

nums = [1,2,4,0,7,4,6]
print(f"Max Increasing Path: {findLengthOfLCIS(nums)}")
